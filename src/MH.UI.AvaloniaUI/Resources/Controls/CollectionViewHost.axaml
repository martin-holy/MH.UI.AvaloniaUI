<Styles
  xmlns="https://github.com/avaloniaui"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:uii="clr-namespace:MH.UI.Interfaces;assembly=MH.UI"
  xmlns:c="clr-namespace:MH.UI.AvaloniaUI.Controls"
  xmlns:conv="clr-namespace:MH.UI.AvaloniaUI.Converters"
  xmlns:mhuInt="clr-namespace:MH.Utils.Interfaces;assembly=MH.Utils"
  xmlns:rd="clr-namespace:MH.UI.AvaloniaUI.Resources">

  <Styles.Resources>
    <ResourceDictionary>
      <ControlTheme x:Key="MH.CT.CollectionView-ItemContainer" TargetType="c:FlatTreeItemHost">
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="FocusAdorner" Value="{x:Null}"/>

        <Setter Property="Template">
          <ControlTemplate>
            <Border
              BorderBrush="{TemplateBinding BorderBrush}" 
              BorderThickness="{TemplateBinding BorderThickness}" 
              Background="{TemplateBinding Background}" 
              Padding="{TemplateBinding Padding}" >

              <ContentPresenter
                ContentTemplate="{TemplateBinding ContentTemplate}"
                Content="{TemplateBinding Content}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>
            </Border>
          </ControlTemplate>
        </Setter>

        <Setter Property="ContentTemplate">
          <Setter.Value>
            <c:CollectionViewTemplateSelector/>
          </Setter.Value>
        </Setter>
      </ControlTheme>

      <ControlTheme x:Key="{x:Type c:CollectionViewHost}" TargetType="c:CollectionViewHost" BasedOn="{StaticResource {x:Type c:TreeViewHost2}}">
        <Setter Property="ItemContainerTheme" Value="{StaticResource MH.CT.CollectionView-ItemContainer}"/>
      </ControlTheme>

      <DataTemplate x:Key="MH.DT.CollectionViewGroup" x:CompileBindings="False">
        <Border
          x:Name="border"
          BorderBrush="Black"
          BorderThickness="1"
          Margin="1,2,1,2"
          Background="{DynamicResource MH.B.Black5}"
          Height="30">

          <Interaction.Behaviors>
            <EventTriggerBehavior EventName="SizeChanged">
              <InvokeCommandAction Command="{x:Static c:CollectionViewHost.SetGroupWidthCommand}" PassEventArgsToCommand="True"/>
            </EventTriggerBehavior>
          </Interaction.Behaviors>

          <Grid
            Margin="{Binding Converter={x:Static conv:TreeMarginConverter.Inst}, ConverterParameter=16}"
            ColumnDefinitions="Auto,Auto,Auto,Auto">

            <ToggleButton
              Grid.Column="0"
              Theme="{DynamicResource MH.S.ToggleButton.TreeExpandCollapse}"
              IsChecked="{Binding TreeItem.IsExpanded, Mode=TwoWay}"
              IsVisible="{Binding TreeItem.Items.Count, Converter={x:Static conv:VisibilityConverter.IntToVisible}}"/>

            <!-- Menu -->
            <Menu
              Grid.Column="1"
              Background="Transparent"
              VerticalAlignment="Center"
              Margin="0">

              <MenuItem Padding="6,2,-2,2">
                <MenuItem.Icon>
                  <PathIcon
                    Data="{Binding TreeItem.Icon, Converter={x:Static conv:ResourceConverter.Inst}}"
                    Foreground="{Binding TreeItem.Icon, Converter={x:Static conv:ResourceConverter.Inst},
                                 ConverterParameter={x:Static rd:Dictionaries.IconToBrush}}"
                    Classes="shadow"/>
                </MenuItem.Icon>

                <MenuItem Command="{Binding TreeItem.View.OpenGroupByDialogCommand}" CommandParameter="{Binding TreeItem}"/>
                <MenuItem Command="{Binding TreeItem.View.ShuffleCommand}" CommandParameter="{Binding TreeItem}"/>
                <MenuItem Command="{Binding TreeItem.View.SortCommand}" CommandParameter="{Binding TreeItem}"/>

                <MenuItem
                  Header="View"
                  ItemsSource="{Binding TreeItem.View.ViewModesCommands}"
                  IsVisible="{Binding TreeItem.View.HasMoreThanOneViewMode}">

                  <MenuItem.ItemContainerTheme>
                    <ControlTheme TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                      <Setter Property="Header" Value="{Binding TreeItem.Text}"/>
                      <Setter Property="Command" Value="{Binding TreeItem}"/>
                      <Setter Property="CommandParameter" Value="{Binding DataContext, ElementName=border}"/>
                    </ControlTheme>
                  </MenuItem.ItemContainerTheme>
                </MenuItem>
              </MenuItem>
            </Menu>

            <TextBlock
              Grid.Column="2"
              Text="{Binding TreeItem.GroupedBy.((mhuInt:IListItem)Data).Name}"
              VerticalAlignment="Center"
              Margin="5,0,5,0"
              FontSize="16"/>

            <TextBlock
              Grid.Column="3"
              Text="{Binding TreeItem.SourceCount}"
              VerticalAlignment="Center"
              Margin="5,0,5,0"
              FontWeight="Bold"
              FontSize="14"/>
          </Grid>
        </Border>
      </DataTemplate>

      <ControlTheme x:Key="{x:Type c:CollectionViewRowItemsControl}" TargetType="c:CollectionViewRowItemsControl">
        <Setter Property="Template">
          <ControlTemplate>
            <ItemsPresenter ItemsPanel="{TemplateBinding ItemsPanel}"/>
          </ControlTemplate>
        </Setter>
      </ControlTheme>

      <ControlTheme x:Key="{x:Type c:CollectionViewItemContainer}" TargetType="c:CollectionViewItemContainer">
        <Setter Property="Template">
          <ControlTemplate>
            <Grid UseLayoutRounding="True" x:CompileBindings="False">
              <Border BorderThickness="2" BorderBrush="Black" Margin="1">
                <ContentPresenter Content="{Binding}" ContentTemplate="{TemplateBinding InnerContentTemplate}"/>
              </Border>

              <Border
                x:Name="selectionBorder"
                BorderThickness="2"
                BorderBrush="{DynamicResource MH.B.Accent}"
                Margin="0"
                Opacity="0"
                Classes.visible="{Binding IsSelected}">

                <Polygon
                  Width="40"
                  Height="40"
                  Points="0,40 40,40 40,0"
                  Stroke="Black"
                  StrokeThickness="1"
                  HorizontalAlignment="Right"
                  VerticalAlignment="Bottom"
                  Fill="{DynamicResource MH.B.Accent9}"/>
              </Border>

              <Grid.Styles>
                <Style Selector="Border#selectionBorder.visible">
                  <Setter Property="Opacity" Value="100"/>
                </Style>
              </Grid.Styles>
            </Grid>
          </ControlTemplate>
        </Setter>
      </ControlTheme>

      <DataTemplate x:Key="MH.DT.CollectionViewRow" x:CompileBindings="False">
        <c:CollectionViewRowItemsControl
          ItemsSource="{Binding TreeItem.Leaves}"
          MaxWidth="{Binding TreeItem.((uii:ICollectionViewGroup)Parent).Width}">

          <Interaction.Behaviors>
            <EventTriggerBehavior EventName="DoubleTapped">
              <InvokeCommandAction Command="{x:Static c:CollectionViewHost.OpenItemCommand}" PassEventArgsToCommand="True"/>
            </EventTriggerBehavior>
            <!--<EventTriggerBehavior EventName="PointerReleased">
              <InvokeCommandAction Command="{x:Static c:CollectionViewHost.SelectItemCommand}" PassEventArgsToCommand="True"/>
            </EventTriggerBehavior>-->
          </Interaction.Behaviors>

          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <StackPanel Orientation="Horizontal" Background="Transparent"/>
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>
        </c:CollectionViewRowItemsControl>
      </DataTemplate>
    </ResourceDictionary>
  </Styles.Resources>
</Styles>